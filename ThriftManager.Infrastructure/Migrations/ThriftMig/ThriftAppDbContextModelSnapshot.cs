// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ThriftManager.Infrastructure;

#nullable disable

namespace ThriftManager.Infrastructure.Migrations.ThriftMig
{
    [DbContext(typeof(ThriftAppDbContext))]
    partial class ThriftAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ThriftSchema")
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("contributionsession_contributionsessionid_seq", "ThriftSchema")
                .IncrementsBy(10);

            modelBuilder.HasSequence("group_groupid_seq", "ThriftSchema")
                .IncrementsBy(10);

            modelBuilder.HasSequence("member_memberid_seq", "ThriftSchema")
                .IncrementsBy(10);

            modelBuilder.HasSequence("sessionmember_sessionmemberid_seq", "ThriftSchema")
                .IncrementsBy(10);

            modelBuilder.HasSequence("SessionWallet_SessionWalletid_seq", "ThriftSchema")
                .IncrementsBy(10);

            modelBuilder.HasSequence("sessionwallettransaction_sessionwallettransactionid_seq", "ThriftSchema")
                .IncrementsBy(10);

            modelBuilder.HasSequence("wallettransaction_wallettransactionid_seq", "ThriftSchema")
                .IncrementsBy(10);

            modelBuilder.Entity("ThriftManager.Domain.Entities.ContributionSession", b =>
                {
                    b.Property<long>("ContributionSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("ContributionSessionId"), "contributionsession_contributionsessionid_seq", "ThriftSchema");

                    b.Property<int>("AdminId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ContributionAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("DueDay")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<int>("Slots")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Tenure")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ContributionSessionId");

                    b.HasIndex("GroupId");

                    b.ToTable("ContributionSession", "ThriftSchema");
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CountryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CountryId");

                    b.ToTable("Country", "ThriftSchema");
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("GroupId"), "group_groupid_seq", "ThriftSchema");

                    b.Property<decimal>("ContributionAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<int>("Slots")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Tenure")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GroupId");

                    b.ToTable("Group", "ThriftSchema");
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.LocalGovtArea", b =>
                {
                    b.Property<int>("LocalGovtAreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LocalGovtAreaId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.HasKey("LocalGovtAreaId");

                    b.HasIndex("StateId");

                    b.ToTable("LocalGovtArea", "ThriftSchema");
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("MemberId"), "member_memberid_seq", "ThriftSchema");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MemberId");

                    b.ToTable("Member", "ThriftSchema");
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.MemberAddress", b =>
                {
                    b.Property<int>("MemberAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MemberAddressId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<int>("LocalGovtAreaId")
                        .HasColumnType("integer");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MemberAddressId");

                    b.HasIndex("LocalGovtAreaId");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("MemberAddress", "ThriftSchema");
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.MemberWallet", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<string>("WalletNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MemberId");

                    b.ToTable("MemberWallet", "ThriftSchema");
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.MemberWalletTransaction", b =>
                {
                    b.Property<long>("MemberWalletTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("MemberWalletTransactionId"), "wallettransaction_wallettransactionid_seq", "ThriftSchema");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<int>("MemberWalletMemberId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.HasKey("MemberWalletTransactionId");

                    b.HasIndex("MemberWalletMemberId");

                    b.ToTable("MemberWalletTransaction", "ThriftSchema");
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.SessionMember", b =>
                {
                    b.Property<int>("SessionMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("SessionMemberId"), "sessionmember_sessionmemberid_seq", "ThriftSchema");

                    b.Property<long>("ContributionSessionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<int>("SlotPosition")
                        .HasColumnType("integer");

                    b.HasKey("SessionMemberId");

                    b.HasIndex("ContributionSessionId");

                    b.ToTable("SessionMember", "ThriftSchema");
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.SessionWallet", b =>
                {
                    b.Property<long>("SessionWalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("SessionWalletId"), "SessionWallet_SessionWalletid_seq", "ThriftSchema");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<int>("BankId")
                        .HasColumnType("integer");

                    b.Property<long>("ContributionSessionId")
                        .HasColumnType("bigint");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WalletNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SessionWalletId");

                    b.HasIndex("ContributionSessionId")
                        .IsUnique();

                    b.ToTable("SessionWallet", "ThriftSchema");
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.SessionWalletTransaction", b =>
                {
                    b.Property<long>("SessionWalletTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("SessionWalletTransactionId"), "sessionwallettransaction_sessionwallettransactionid_seq", "ThriftSchema");

                    b.Property<long>("ContributionSessionId")
                        .HasColumnType("bigint");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<long>("SessionWalletId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.HasKey("SessionWalletTransactionId");

                    b.HasIndex("SessionWalletId");

                    b.ToTable("SessionWalletTransaction", "ThriftSchema");
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StateId"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("State", "ThriftSchema");
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.ContributionSession", b =>
                {
                    b.HasOne("ThriftManager.Domain.Entities.Group", null)
                        .WithMany("ContributionSessions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.LocalGovtArea", b =>
                {
                    b.HasOne("ThriftManager.Domain.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.Member", b =>
                {
                    b.OwnsOne("ThriftManager.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("MemberId")
                                .HasColumnType("integer");

                            b1.Property<int>("Hash")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.HasKey("MemberId");

                            b1.ToTable("Member", "ThriftSchema");

                            b1.WithOwner()
                                .HasForeignKey("MemberId");
                        });

                    b.OwnsOne("ThriftManager.Domain.ValueObjects.FullName", "Name", b1 =>
                        {
                            b1.Property<int>("MemberId")
                                .HasColumnType("integer");

                            b1.Property<string>("First")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Last")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Others")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("MemberId");

                            b1.ToTable("Member", "ThriftSchema");

                            b1.WithOwner()
                                .HasForeignKey("MemberId");
                        });

                    b.OwnsOne("ThriftManager.Domain.ValueObjects.MobileNo", "MobileNumber", b1 =>
                        {
                            b1.Property<int>("MemberId")
                                .HasColumnType("integer");

                            b1.Property<int>("Hash")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("character varying(11)");

                            b1.HasKey("MemberId");

                            b1.ToTable("Member", "ThriftSchema");

                            b1.WithOwner()
                                .HasForeignKey("MemberId");
                        });

                    b.OwnsOne("ThriftManager.Domain.ValueObjects.NIN", "NIN", b1 =>
                        {
                            b1.Property<int>("MemberId")
                                .HasColumnType("integer");

                            b1.Property<int>("Hash")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("character varying(11)");

                            b1.HasKey("MemberId");

                            b1.ToTable("Member", "ThriftSchema");

                            b1.WithOwner()
                                .HasForeignKey("MemberId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("MobileNumber")
                        .IsRequired();

                    b.Navigation("NIN")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.MemberAddress", b =>
                {
                    b.HasOne("ThriftManager.Domain.Entities.LocalGovtArea", "LocalGovtArea")
                        .WithMany()
                        .HasForeignKey("LocalGovtAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThriftManager.Domain.Entities.Member", "Member")
                        .WithOne("MemberAddress")
                        .HasForeignKey("ThriftManager.Domain.Entities.MemberAddress", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocalGovtArea");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.MemberWallet", b =>
                {
                    b.HasOne("ThriftManager.Domain.Entities.Member", null)
                        .WithOne("MemberWallet")
                        .HasForeignKey("ThriftManager.Domain.Entities.MemberWallet", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ThriftManager.Domain.ValueObjects.BankAccount", "Account", b1 =>
                        {
                            b1.Property<int>("MemberWalletMemberId")
                                .HasColumnType("integer");

                            b1.Property<string>("AccountName")
                                .IsRequired()
                                .HasMaxLength(80)
                                .HasColumnType("character varying(80)");

                            b1.Property<string>("AccountNo")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)");

                            b1.Property<string>("BVN")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("character varying(11)");

                            b1.Property<int>("BankId")
                                .HasColumnType("integer");

                            b1.HasKey("MemberWalletMemberId");

                            b1.ToTable("MemberWallet", "ThriftSchema");

                            b1.WithOwner()
                                .HasForeignKey("MemberWalletMemberId");
                        });

                    b.Navigation("Account")
                        .IsRequired();
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.MemberWalletTransaction", b =>
                {
                    b.HasOne("ThriftManager.Domain.Entities.MemberWallet", "MemberWallet")
                        .WithMany("MemberWalletTransactions")
                        .HasForeignKey("MemberWalletMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MemberWallet");
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.SessionMember", b =>
                {
                    b.HasOne("ThriftManager.Domain.Entities.ContributionSession", null)
                        .WithMany("SessionMembers")
                        .HasForeignKey("ContributionSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.SessionWallet", b =>
                {
                    b.HasOne("ThriftManager.Domain.Entities.ContributionSession", null)
                        .WithOne("SessionWallet")
                        .HasForeignKey("ThriftManager.Domain.Entities.SessionWallet", "ContributionSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.SessionWalletTransaction", b =>
                {
                    b.HasOne("ThriftManager.Domain.Entities.SessionWallet", null)
                        .WithMany("WalletTransactions")
                        .HasForeignKey("SessionWalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.State", b =>
                {
                    b.HasOne("ThriftManager.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.ContributionSession", b =>
                {
                    b.Navigation("SessionMembers");

                    b.Navigation("SessionWallet")
                        .IsRequired();
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.Group", b =>
                {
                    b.Navigation("ContributionSessions");
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.Member", b =>
                {
                    b.Navigation("MemberAddress")
                        .IsRequired();

                    b.Navigation("MemberWallet")
                        .IsRequired();
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.MemberWallet", b =>
                {
                    b.Navigation("MemberWalletTransactions");
                });

            modelBuilder.Entity("ThriftManager.Domain.Entities.SessionWallet", b =>
                {
                    b.Navigation("WalletTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
